// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enhanced Tenant model (migrated from Redis SubdomainData)
model Tenant {
  id                  String   @id @default(cuid())
  subdomain           String   @unique
  emoji               String   @default("üè¢")
  businessName        String
  businessCategory    String
  ownerName           String
  email               String
  phone               String
  address             String?
  businessDescription String?
  logo                String?
  
  // Brand colors as JSON
  brandColors         Json?
  
  // Feature flags
  whatsappEnabled     Boolean  @default(false)
  homeVisitEnabled    Boolean  @default(false)
  analyticsEnabled    Boolean  @default(false)
  customTemplatesEnabled Boolean @default(false)
  multiStaffEnabled   Boolean  @default(false)
  
  // Subscription info
  subscriptionPlan    String   @default("basic") // basic, premium, enterprise
  subscriptionStatus  String   @default("active") // active, suspended, cancelled
  subscriptionExpiresAt DateTime?
  
  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  services            Service[]
  customers           Customer[]
  bookings            Booking[]
  staff               Staff[]
  whatsappDevices     WhatsAppDevice[]
  conversations       Conversation[]
  messageTemplates    MessageTemplate[]
  businessHours       BusinessHours?
  
  @@map("tenants")
}

// Service model
model Service {
  id                  String   @id @default(cuid())
  tenantId            String
  name                String
  description         String
  duration            Int      // minutes
  price               Decimal  @db.Decimal(10, 2)
  category            String
  isActive            Boolean  @default(true)
  homeVisitAvailable  Boolean  @default(false)
  homeVisitSurcharge  Decimal? @db.Decimal(10, 2)
  images              String[] // Array of image URLs
  requirements        String[] // Array of requirements
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  bookings            Booking[]
  
  @@map("services")
}

// Customer model
model Customer {
  id                  String   @id @default(cuid())
  tenantId            String
  name                String
  email               String?
  phone               String
  address             String?
  notes               String?
  totalBookings       Int      @default(0)
  lastBookingAt       DateTime?
  whatsappNumber      String?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  bookings            Booking[]
  conversations       Conversation[]
  
  @@map("customers")
}

// Booking model
model Booking {
  id                  String   @id @default(cuid())
  tenantId            String
  customerId          String
  serviceId           String
  status              String   @default("pending") // pending, confirmed, completed, cancelled, no_show
  scheduledAt         DateTime
  duration            Int      // minutes
  isHomeVisit         Boolean  @default(false)
  homeVisitAddress    String?
  homeVisitCoordinates Json?   // {lat: number, lng: number}
  notes               String?
  totalAmount         Decimal  @db.Decimal(10, 2)
  paymentStatus       String   @default("pending") // pending, paid, refunded
  remindersSent       DateTime[] // Array of reminder timestamps
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer            Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  service             Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@map("bookings")
}

// Staff model for multi-staff support
model Staff {
  id                  String   @id @default(cuid())
  tenantId            String
  name                String
  email               String
  phone               String?
  role                String   @default("staff") // admin, staff
  permissions         String[] // Array of permissions
  isActive            Boolean  @default(true)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assignedConversations Conversation[]
  
  @@map("staff")
}

// WhatsApp Device model
model WhatsAppDevice {
  id                  String   @id @default(cuid())
  tenantId            String
  deviceName          String
  phoneNumber         String
  status              String   @default("disconnected") // connected, disconnected, connecting
  lastSeen            DateTime?
  qrCode              String?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("whatsapp_devices")
}

// Conversation model
model Conversation {
  id                  String   @id @default(cuid())
  tenantId            String
  customerId          String
  whatsappNumber      String
  lastMessageAt       DateTime @default(now())
  unreadCount         Int      @default(0)
  assignedToId        String?  // staff member ID
  status              String   @default("active") // active, archived
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer            Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  assignedTo          Staff?   @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  messages            Message[]
  
  @@map("conversations")
}

// Message model
model Message {
  id                  String   @id @default(cuid())
  conversationId      String
  type                String   @default("text") // text, image, file, voice, template
  content             String
  mediaUrl            String?
  isFromCustomer      Boolean  @default(true)
  deliveryStatus      String   @default("sent") // sent, delivered, read, failed
  sentAt              DateTime @default(now())
  
  // Relations
  conversation        Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

// Message Template model
model MessageTemplate {
  id                  String   @id @default(cuid())
  tenantId            String
  name                String
  content             String
  variables           String[] // e.g., ['CustomerName', 'BookingDate', 'ServiceName']
  category            String   @default("reminder") // reminder, confirmation, follow_up, marketing
  isActive            Boolean  @default(true)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("message_templates")
}

// Business Hours model
model BusinessHours {
  id                  String   @id @default(cuid())
  tenantId            String   @unique
  schedule            Json     // Schedule configuration as JSON
  timezone            String   @default("Asia/Jakarta")
  
  updatedAt           DateTime @updatedAt
  
  // Relations
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("business_hours")
}
